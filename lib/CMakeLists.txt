cmake_minimum_required(VERSION 3.16)

project(${PROJECT_NAME}-lib VERSION 0.0.1.0 LANGUAGES CXX)

include(GNUInstallDirs)
include(GenerateExportHeader)

option(TMPL_LIB_BUILD_SHARED "Enable compilation of shared libraries" ${BUILD_SHARED_LIBS})
option(TMPL_LIB_BUILD_TESTS "Build ${PROJECT_NAME} tests" ${TMPL_BUILD_TESTS})
option(TMPL_LIB_BUILD_EXAMPLES "Build ${PROJECT_NAME} examples" ${TMPL_BUILD_EXAMPLE})
option(TMPL_LIB_EXCLUDE_DEPRECATED "Exclude deprecated from ${PROJECT_NAME_UPPER}" ${TMPL_EXCLUDE_DEPRECATED})

set(OUTPUT_NAME tmpl)
set(INCLUDE_DIR include/${OUTPUT_NAME})
set(RC_PATH ${PROJECT_BINARY_DIR}/${OUTPUT_NAME}/${OUTPUT_NAME}.rc)

set(${PROJECT_NAME}_LIB_TYPE STATIC)
if(TMPL_LIB_BUILD_SHARED)
	set(${PROJECT_NAME}_LIB_TYPE SHARED)
endif()

add_library(${PROJECT_NAME}
	${${PROJECT_NAME}_LIB_TYPE}
		${INCLUDE_DIR}/${OUTPUT_NAME}.hpp
		${INCLUDE_DIR}/example.hpp
		src/example.cpp
)
target_compile_features(${PROJECT_NAME} PUBLIC cxx_std_17)
target_include_directories(${PROJECT_NAME}
	PUBLIC
		$<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>
		$<BUILD_INTERFACE:${PROJECT_BINARY_DIR}>
		$<INSTALL_INTERFACE:include>
)
set_target_properties(${PROJECT_NAME}
	PROPERTIES
		OUTPUT_NAME ${OUTPUT_NAME}
		VERSION ${PROJECT_VERSION}
		SOVERSION ${PROJECT_VERSION_MAJOR}
		FRAMEWORK ON
		FRAMEWORK_VERSION A
		MACOSX_RPATH ON
		INSTALL_RPATH @executable_path
		CXX_VISIBILITY_PRESET hidden
		VISIBILITY_INLINES_HIDDEN ON
)

add_library(Tmpl::lib ALIAS ${PROJECT_NAME})

if(TMPL_LIB_BUILD_TESTS)
	add_subdirectory(tests)
endif()

if(TMPL_LIB_BUILD_EXAMPLES)
	add_subdirectory(examples)
endif()

if(TMPL_LIB_EXCLUDE_DEPRECATED)
	set(NO_BUILD_DEPRECATED DEFINE_NO_DEPRECATED)
endif()

generate_export_header(${PROJECT_NAME}
	BASE_NAME ${OUTPUT_NAME}
	EXPORT_FILE_NAME ${PROJECT_BINARY_DIR}/${OUTPUT_NAME}/exports.hpp
	${NO_BUILD_DEPRECATED})

configure_file(version.hpp.in ${PROJECT_BINARY_DIR}/${OUTPUT_NAME}/version.hpp)
if(MSVC)
	configure_file(${CMAKE_SOURCE_DIR}/rc.in ${RC_PATH})
	target_sources(${PROJECT_NAME} PRIVATE ${RC_PATH})
endif()

install(EXPORT ${PROJECT_NAME} DESTINATION cmake/${OUTPUT_NAME} FILE ${OUTPUT_NAME}Config.cmake)
install(TARGETS ${PROJECT_NAME}
	EXPORT ${PROJECT_NAME} COMPONENT ${PROJECT_NAME}_dev
	RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT ${PROJECT_NAME}_runtime
	LIBRARY
		DESTINATION ${CMAKE_INSTALL_LIBDIR}
		COMPONENT ${PROJECT_NAME}_runtime
		NAMELINK_COMPONENT ${PROJECT_NAME}_dev
	ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT ${PROJECT_NAME}_dev
	FRAMEWORK DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT ${PROJECT_NAME}_runtime
	PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
)
install(DIRECTORY include/${OUTPUT_NAME}
	DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
	COMPONENT ${PROJECT_NAME}_dev
)
install(FILES
	${PROJECT_BINARY_DIR}/${OUTPUT_NAME}/${OUTPUT_NAME}_export.h
	${PROJECT_BINARY_DIR}/${OUTPUT_NAME}/version.hpp
	DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${OUTPUT_NAME}
	COMPONENT ${PROJECT_NAME}_dev
)

#

set(CPACK_PACKAGE_VENDOR "VENDOR")
set(CPACK_PACKAGE_CONTACT "https://tmpl.org")
set(CPACK_DEBIAN_PACKAGE_MAINTAINER "support@tmpl.org")
set(CPACK_PACKAGE_DESCRIPTION ${PROJECT_DESCRIPTION})

set(CPACK_GENERATOR "ZIP")

include(CPack)
