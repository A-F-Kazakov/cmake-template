set(CMAKE_CXX_VISIBILITY_PRESET hidden)
set(CMAKE_VISIBILITY_INLINES_HIDDEN TRUE)

include(GenerateExportHeader)

set(CMAKE_CXX_VISIBILITY_PRESET hidden)
set(CMAKE_VISIBILITY_INLINES_HIDDEN 1)

project(lib VERSION ${PROJECT_VERSION})

string(TOUPPER ${CMAKE_PROJECT_NAME} CMAKE_PROJECT_NAME_UPPER)
string(TOLOWER ${CMAKE_PROJECT_NAME} CMAKE_PROJECT_NAME_LOWER)
string(TOUPPER ${PROJECT_NAME} PROJECT_NAME_UPPER)
string(TOLOWER ${PROJECT_NAME} PROJECT_NAME_LOWER)
set(FULL_PROJECT_NAME_UPPER ${CMAKE_PROJECT_NAME_UPPER}_${PROJECT_NAME_UPPER})

option(${FULL_PROJECT_NAME_UPPER}_BUILD_SHARED "Enable compilation of shared libraries" ${BUILD_SHARED_LIBS})
option(${FULL_PROJECT_NAME_UPPER}_BUILD_TESTS "Build ${PROJECT_NAME} tests" OFF)
option(${FULL_PROJECT_NAME_UPPER}_BUILD_EXAMPLES "Build ${PROJECT_NAME} examples" OFF)
option(${FULL_PROJECT_NAME_UPPER}_EXCLUDE_DEPRECATED "Exclude deprecated parts of the library" OFF)

set(INCLUDE_DIR include/${CMAKE_PROJECT_NAME_LOWER})

set(${FULL_PROJECT_NAME_UPPER}_LIB_TYPE STATIC)
if(${FULL_PROJECT_NAME_UPPER}_BUILD_SHARED)
	set(${FULL_PROJECT_NAME_UPPER}_LIB_TYPE SHARED)
endif()

add_library(${PROJECT_NAME} ${${FULL_PROJECT_NAME_UPPER}_LIB_TYPE} ${INCLUDE_DIR}/example.hpp src/example.cpp)

target_compile_features(${PROJECT_NAME} PUBLIC cxx_std_17)
target_include_directories(${PROJECT_NAME}
	PUBLIC
		$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
		$<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>
		$<INSTALL_INTERFACE:include>
)
set_target_properties(${PROJECT_NAME}
	PROPERTIES
	OUTPUT_NAME ${CMAKE_PROJECT_NAME_LOWER}
		VERSION ${PROJECT_VERSION}
		SOVERSION ${PROJECT_VERSION_MAJOR}
		FRAMEWORK ON
		FRAMEWORK_VERSION A
		MACOSX_RPATH ON
		INSTALL_RPATH @executable_path
)

generate_export_header(${PROJECT_NAME})

if(${${FULL_PROJECT_NAME_UPPER}_BUILD_TESTS})
	add_subdirectory(tests)
endif()

if(${${FULL_PROJECT_NAME_UPPER}_BUILD_EXAMPLES})
	add_subdirectory(examples)
endif()

add_library(${CMAKE_PROJECT_NAME}::${PROJECT_NAME} ALIAS ${PROJECT_NAME})

if(${${FULL_PROJECT_NAME_UPPER}_EXCLUDE_DEPRECATED})
	set(NO_BUILD_DEPRECATED DEFIME_NO_DEPRECATE)
endif()

generate_export_header(${PROJECT_NAME} BASE_NAME ${CMAKE_PROJECT_NAME} ${NO_BUILD_DEPRECATED})

configure_file(config.hpp.in ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_PROJECT_NAME}.hpp)

install(FILES
	${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_PROJECT_NAME}.hpp
	${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_PROJECT_NAME_LOWER}_export.h
	DESTINATION include/${CMAKE_PROJECT_NAME_LOWER} COMPONENT headers)

install(EXPORT ${PROJECT_NAME} DESTINATION cmake/${PROJECT_NAME_LOWER} FILE ${CMAKE_PROJECT_NAME}Config.cmake)
install(TARGETS ${PROJECT_NAME}
	EXPORT ${PROJECT_NAME} COMPONENT PKG
	RUNTIME DESTINATION bin COMPONENT ${PROJECT_NAME}
	LIBRARY DESTINATION lib COMPONENT ${PROJECT_NAME}
	ARCHIVE DESTINATION lib/static COMPONENT ${PROJECT_NAME}
	FRAMEWORK DESTINATION lib COMPONENT ${PROJECT_NAME}
)
install(DIRECTORY include/${CMAKE_PROJECT_NAME_LOWER} DESTINATION include COMPONENT headers)
install(FILES src/example.cpp DESTINATION src COMPONENT sources)
