cmake_minimum_required(VERSION 3.13)

project(lib VERSION ${PROJECT_VERSION})

string(TOUPPER ${CMAKE_PROJECT_NAME} CMAKE_PROJECT_NAME_UPPER)
string(TOLOWER ${CMAKE_PROJECT_NAME} CMAKE_PROJECT_NAME_LOWER)
string(TOUPPER ${PROJECT_NAME} PROJECT_NAME_UPPER)
string(TOLOWER ${PROJECT_NAME} PROJECT_NAME_LOWER)
set(FULL_PROJECT_NAME_UPPER ${CMAKE_PROJECT_NAME_UPPER}_${PROJECT_NAME_UPPER})

option(${FULL_PROJECT_NAME_UPPER}_BUILD_SHARED "Enable compilation of shared libraries" ${BUILD_SHARED_LIBS})
option(${FULL_PROJECT_NAME_UPPER}_BUILD_TESTS "Build ${PROJECT_NAME} tests" OFF)
option(${FULL_PROJECT_NAME_UPPER}_BUILD_EXAMPLES "Build ${PROJECT_NAME} examples" OFF)

set(INCLUDE_DIR include/${CMAKE_PROJECT_NAME_LOWER})

configure_file(config.hpp.in ${CMAKE_CURRENT_BINARY_DIR}/config.hpp)

file(GLOB ${FULL_PROJECT_NAME_UPPER}_HEADERS ${INCLUDE_DIR}/*.hpp)
set(${FULL_PROJECT_NAME_UPPER}_HEADERS "${${FULL_PROJECT_NAME_UPPER}_HEADERS} ${CMAKE_CURRENT_BINARY_DIR}/config.hpp")

set(${FULL_PROJECT_NAME_UPPER}_LIB_TYPE STATIC)
if(${FULL_PROJECT_NAME_UPPER}_BUILD_SHARED)
	set(${FULL_PROJECT_NAME_UPPER}_LIB_TYPE SHARED)
endif()

add_library(${PROJECT_NAME} ${${FULL_PROJECT_NAME_UPPER}_LIB_TYPE})

target_compile_features(${PROJECT_NAME} PUBLIC cxx_std_17)
target_include_directories(${PROJECT_NAME}
	PUBLIC
		$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
		$<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>
		$<INSTALL_INTERFACE:include>
)
target_sources(${PROJECT_NAME}
	PRIVATE
		${INCLUDE_DIR}/example.hpp
		src/example.cpp
)
set_target_properties(${PROJECT_NAME}
	PROPERTIES
		VERSION ${PROJECT_VERSION}
		SOVERSION ${PROJECT_VERSION_MAJOR}
		PUBLIC_HEADER ${${FULL_PROJECT_NAME_UPPER}_HEADERS}
		FRAMEWORK ON
		FRAMEWORK_VERSION A
		MACOSX_RPATH ON
		WINDOWS_EXPORT_ALL_SYMBOLS ON
)

if(${FULL_PROJECT_NAME_UPPER}_BUILD_TESTS)
	add_subdirectory(tests)
endif()
if(${FULL_PROJECT_NAME_UPPER}_BUILD_EXAMPLES)
	add_subdirectory(examples)
endif()

add_library(${CMAKE_PROJECT_NAME}::${PROJECT_NAME} ALIAS ${PROJECT_NAME})

install(EXPORT ${PROJECT_NAME} DESTINATION cmake/${PROJECT_NAME_LOWER} FILE ${PROJECT_NAME}Config.cmake)
install(TARGETS ${PROJECT_NAME}
	EXPORT ${PROJECT_NAME} COMPONENT PKG
	RUNTIME DESTINATION bin COMPONENT ${PROJECT_NAME}
	LIBRARY DESTINATION lib COMPONENT ${PROJECT_NAME}
	ARCHIVE DESTINATION lib/static COMPONENT ${PROJECT_NAME}
	FRAMEWORK DESTINATION lib COMPONENT ${PROJECT_NAME}
)
install(FILES ${${FULL_PROJECT_NAME_UPPER}_HEADERS} DESTINATION include COMPONENT headers)
install(FILES src/exampe.cpp DESTINATION src COMPONENT sources)
